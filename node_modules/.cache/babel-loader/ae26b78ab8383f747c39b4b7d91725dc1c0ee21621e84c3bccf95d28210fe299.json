{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\saint\\\\webpro\\\\webpro\\\\src\\\\pages\\\\Chat.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [localMessages, setLocalMessages] = useState([]);\n  const [currentMessage, setCurrentMessage] = useState('');\n  const [socket, setSocket] = useState(null);\n  useEffect(() => {\n    const newSocket = new WebSocket('ws://192.168.0.23:4002');\n    newSocket.onopen = () => {\n      console.log('WebSocket connection opened');\n    };\n    newSocket.onmessage = event => {\n      try {\n        const data = event.data;\n        if (typeof data === 'string') {\n          try {\n            // Attempt to parse the message as JSON\n            const parsedMessage = JSON.parse(data);\n\n            // Check the type of the message\n            if (parsedMessage.type === 'text') {\n              setMessages(prevMessages => [...prevMessages, parsedMessage.content]);\n            } else {\n              // Handle other types of messages (e.g., binary data)\n              // Add your logic here if needed\n            }\n          } catch (jsonError) {\n            // If parsing as JSON fails, treat the message as a regular string\n            setMessages(prevMessages => [...prevMessages, data]);\n          }\n        } else if (data instanceof Blob) {\n          // Handle Blob data as binary\n          const reader = new FileReader();\n          reader.onload = () => {\n            setMessages(prevMessages => [...prevMessages, reader.result]);\n          };\n          reader.readAsArrayBuffer(data);\n        } else if (data instanceof ArrayBuffer) {\n          // Convert ArrayBuffer to text using TextDecoder\n          const text = new TextDecoder().decode(data);\n          setMessages(prevMessages => [...prevMessages, text]);\n        }\n      } catch (error) {\n        console.error('Error in onmessage:', error);\n      }\n    };\n    newSocket.onclose = () => {\n      console.log('WebSocket connection closed');\n    };\n    setSocket(newSocket);\n    return () => {\n      try {\n        newSocket.close();\n      } catch (error) {\n        console.error('Error in cleanup:', error);\n      }\n    };\n  }, []);\n  const sendMessage = () => {\n    try {\n      if (socket && socket.readyState === WebSocket.OPEN) {\n        // Send message as JSON\n        socket.send(JSON.stringify({\n          type: 'text',\n          content: currentMessage\n        }));\n        setLocalMessages(prevLocalMessages => [...prevLocalMessages, currentMessage]);\n        setCurrentMessage('');\n      }\n    } catch (error) {\n      console.error('Error in sendMessage:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Chat Room\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n        children: messages.map((message, index) => {\n          console.log('Message at index', index, ':', message);\n          return /*#__PURE__*/_jsxDEV(Li, {\n            children: typeof message === 'string' ? message : /*#__PURE__*/_jsxDEV(\"span\", {\n              children: `${message}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: localMessages.map((localMessage, index) => /*#__PURE__*/_jsxDEV(Li, {\n          children: localMessage\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: currentMessage,\n        onChange: e => setCurrentMessage(e.target.value),\n        placeholder: \"Type your message here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"wj+rxxeH4teCaO52k/Yyc1Ywmdc=\");\n_c = Chat;\nconst Li = styled.li`\n  list-style: none;\n`;\n_c2 = Li;\nexport default Chat;\nvar _c, _c2;\n$RefreshReg$(_c, \"Chat\");\n$RefreshReg$(_c2, \"Li\");","map":{"version":3,"names":["useState","useEffect","styled","jsxDEV","_jsxDEV","Chat","_s","messages","setMessages","localMessages","setLocalMessages","currentMessage","setCurrentMessage","socket","setSocket","newSocket","WebSocket","onopen","console","log","onmessage","event","data","parsedMessage","JSON","parse","type","prevMessages","content","jsonError","Blob","reader","FileReader","onload","result","readAsArrayBuffer","ArrayBuffer","text","TextDecoder","decode","error","onclose","close","sendMessage","readyState","OPEN","send","stringify","prevLocalMessages","children","fileName","_jsxFileName","lineNumber","columnNumber","map","message","index","Li","localMessage","value","onChange","e","target","placeholder","onClick","_c","li","_c2","$RefreshReg$"],"sources":["C:/Users/saint/webpro/webpro/src/pages/Chat.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Chat = () => {\r\n  const [messages, setMessages] = useState<(string | ArrayBuffer)[]>([]);\r\n  const [localMessages, setLocalMessages] = useState<string[]>([]);\r\n  const [currentMessage, setCurrentMessage] = useState<string>('');\r\n  const [socket, setSocket] = useState<WebSocket | null>(null);\r\n\r\n  useEffect(() => {\r\n    const newSocket = new WebSocket('ws://192.168.0.23:4002');\r\n\r\n    newSocket.onopen = () => {\r\n      console.log('WebSocket connection opened');\r\n    };\r\n\r\n    newSocket.onmessage = (event) => {\r\n      try {\r\n        const data = event.data;\r\n    \r\n        if (typeof data === 'string') {\r\n          try {\r\n            // Attempt to parse the message as JSON\r\n            const parsedMessage = JSON.parse(data);\r\n    \r\n            // Check the type of the message\r\n            if (parsedMessage.type === 'text') {\r\n              setMessages((prevMessages) => [...prevMessages, parsedMessage.content]);\r\n            } else {\r\n              // Handle other types of messages (e.g., binary data)\r\n              // Add your logic here if needed\r\n            }\r\n          } catch (jsonError) {\r\n            // If parsing as JSON fails, treat the message as a regular string\r\n            setMessages((prevMessages) => [...prevMessages, data]);\r\n          }\r\n        } else if (data instanceof Blob) {\r\n          // Handle Blob data as binary\r\n          const reader = new FileReader();\r\n          reader.onload = () => {\r\n            setMessages((prevMessages) => [\r\n              ...prevMessages,\r\n              reader.result! as string | ArrayBuffer,\r\n            ]);\r\n          };\r\n          reader.readAsArrayBuffer(data);\r\n        } else if (data instanceof ArrayBuffer) {\r\n          // Convert ArrayBuffer to text using TextDecoder\r\n          const text = new TextDecoder().decode(data);\r\n          setMessages((prevMessages) => [...prevMessages, text]);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error in onmessage:', error);\r\n      }\r\n    };\r\n\r\n    newSocket.onclose = () => {\r\n      console.log('WebSocket connection closed');\r\n    };\r\n\r\n    setSocket(newSocket);\r\n\r\n    return () => {\r\n      try {\r\n        newSocket.close();\r\n      } catch (error) {\r\n        console.error('Error in cleanup:', error);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const sendMessage = () => {\r\n    try {\r\n      if (socket && socket.readyState === WebSocket.OPEN) {\r\n        // Send message as JSON\r\n        socket.send(JSON.stringify({ type: 'text', content: currentMessage }));\r\n        setLocalMessages((prevLocalMessages) => [...prevLocalMessages, currentMessage]);\r\n        setCurrentMessage('');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error in sendMessage:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Chat Room</h2>\r\n      <div>\r\n      <ul>\r\n        {messages.map((message, index) => {\r\n          console.log('Message at index', index, ':', message);\r\n          return (\r\n            <Li key={index}>\r\n              {typeof message === 'string' ? (\r\n                message\r\n              ) : (\r\n                <span>{`${message}`}</span>\r\n              )}\r\n            </Li>\r\n          );\r\n        })}\r\n      </ul>\r\n        <ul>\r\n          {localMessages.map((localMessage, index) => (\r\n            <Li key={index}>{localMessage}</Li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          value={currentMessage}\r\n          onChange={(e) => setCurrentMessage(e.target.value)}\r\n          placeholder=\"Type your message here\"\r\n        />\r\n        <button onClick={sendMessage}>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Li = styled.li`\r\n  list-style: none;\r\n`;\r\n\r\nexport default Chat;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}