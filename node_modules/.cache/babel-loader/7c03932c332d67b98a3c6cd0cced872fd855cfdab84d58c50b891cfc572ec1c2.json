{"ast":null,"code":"import cryptoJs from \"crypto-js\";\nexport const secretKey = `${process.env.REACT_APP_DB_SECRETKEY}`;\nexport const iv = `${process.env.REACT_APP_DB_IV}`;\n\n// 암호화\nexport const encrypt = text => {\n  const cipher = cryptoJs.AES.encrypt(text, cryptoJs.enc.Utf8.parse(secretKey), {\n    iv: cryptoJs.enc.Utf8.parse(iv),\n    padding: cryptoJs.pad.Pkcs7,\n    mode: cryptoJs.mode.CBC\n  });\n  return cipher.toString();\n};\n\n// 복호화\nconst decrypt = encryptedText => {\n  try {\n    const decipher = cryptoJs.AES.decrypt(encryptedText, cryptoJs.enc.Utf8.parse(secretKey), {\n      iv: cryptoJs.enc.Utf8.parse(iv),\n      padding: cryptoJs.pad.Pkcs7,\n      mode: cryptoJs.mode.CBC\n    });\n    return decipher.toString(cryptoJs.enc.Utf8);\n  } catch (error) {\n    console.error('Error during decryption:', error);\n    return ''; // or handle the error in an appropriate way\n  }\n};","map":{"version":3,"names":["cryptoJs","secretKey","process","env","REACT_APP_DB_SECRETKEY","iv","REACT_APP_DB_IV","encrypt","text","cipher","AES","enc","Utf8","parse","padding","pad","Pkcs7","mode","CBC","toString","decrypt","encryptedText","decipher","error","console"],"sources":["C:/Users/saint/webpro/webpro/src/modules/cryptosJs.ts"],"sourcesContent":["import cryptoJs from \"crypto-js\";\r\n\r\n\r\nexport const secretKey = `${process.env.REACT_APP_DB_SECRETKEY}`;\r\nexport const iv = `${process.env.REACT_APP_DB_IV}`;\r\n\r\n// 암호화\r\nexport const encrypt = (text: string) => {\r\n  const cipher = cryptoJs.AES.encrypt(text, cryptoJs.enc.Utf8.parse(secretKey), {\r\n      iv: cryptoJs.enc.Utf8.parse(iv),\r\n      padding: cryptoJs.pad.Pkcs7,\r\n      mode: cryptoJs.mode.CBC,\r\n  });\r\n\r\n  return cipher.toString();\r\n}\r\n\r\n// 복호화\r\nconst decrypt = (encryptedText: string) => {\r\n    try {\r\n      const decipher = cryptoJs.AES.decrypt(encryptedText, cryptoJs.enc.Utf8.parse(secretKey), {\r\n        iv: cryptoJs.enc.Utf8.parse(iv),\r\n        padding: cryptoJs.pad.Pkcs7,\r\n        mode: cryptoJs.mode.CBC,\r\n      });\r\n      return decipher.toString(cryptoJs.enc.Utf8);\r\n    } catch (error) {\r\n      console.error('Error during decryption:', error);\r\n      return ''; // or handle the error in an appropriate way\r\n    }\r\n  }"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,WAAW;AAGhC,OAAO,MAAMC,SAAS,GAAI,GAAEC,OAAO,CAACC,GAAG,CAACC,sBAAuB,EAAC;AAChE,OAAO,MAAMC,EAAE,GAAI,GAAEH,OAAO,CAACC,GAAG,CAACG,eAAgB,EAAC;;AAElD;AACA,OAAO,MAAMC,OAAO,GAAIC,IAAY,IAAK;EACvC,MAAMC,MAAM,GAAGT,QAAQ,CAACU,GAAG,CAACH,OAAO,CAACC,IAAI,EAAER,QAAQ,CAACW,GAAG,CAACC,IAAI,CAACC,KAAK,CAACZ,SAAS,CAAC,EAAE;IAC1EI,EAAE,EAAEL,QAAQ,CAACW,GAAG,CAACC,IAAI,CAACC,KAAK,CAACR,EAAE,CAAC;IAC/BS,OAAO,EAAEd,QAAQ,CAACe,GAAG,CAACC,KAAK;IAC3BC,IAAI,EAAEjB,QAAQ,CAACiB,IAAI,CAACC;EACxB,CAAC,CAAC;EAEF,OAAOT,MAAM,CAACU,QAAQ,CAAC,CAAC;AAC1B,CAAC;;AAED;AACA,MAAMC,OAAO,GAAIC,aAAqB,IAAK;EACvC,IAAI;IACF,MAAMC,QAAQ,GAAGtB,QAAQ,CAACU,GAAG,CAACU,OAAO,CAACC,aAAa,EAAErB,QAAQ,CAACW,GAAG,CAACC,IAAI,CAACC,KAAK,CAACZ,SAAS,CAAC,EAAE;MACvFI,EAAE,EAAEL,QAAQ,CAACW,GAAG,CAACC,IAAI,CAACC,KAAK,CAACR,EAAE,CAAC;MAC/BS,OAAO,EAAEd,QAAQ,CAACe,GAAG,CAACC,KAAK;MAC3BC,IAAI,EAAEjB,QAAQ,CAACiB,IAAI,CAACC;IACtB,CAAC,CAAC;IACF,OAAOI,QAAQ,CAACH,QAAQ,CAACnB,QAAQ,CAACW,GAAG,CAACC,IAAI,CAAC;EAC7C,CAAC,CAAC,OAAOW,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,OAAO,EAAE,CAAC,CAAC;EACb;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}