{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$(),\n  _s6 = $RefreshSig$(),\n  _s7 = $RefreshSig$(),\n  _s8 = $RefreshSig$(),\n  _s9 = $RefreshSig$(),\n  _s10 = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { parseJwt } from './Modules';\n{/* 딜레이 적용한 네비게이션 */}\nfunction DelayedNavi() {\n  _s();\n  const navigate = useNavigate();\n  const [delayedNavigation, setDelayedNavigation] = useState(false);\n  const triggerDelayedNavigation = (to, options) => {\n    setDelayedNavigation(true);\n    setTimeout(() => {\n      navigate(to, options);\n      setDelayedNavigation(false);\n    }, 500);\n  };\n  return triggerDelayedNavigation;\n}\n_s(DelayedNavi, \"aWXU6DiHiZj0UcMiUcY14etcV2A=\", false, function () {\n  return [useNavigate];\n});\n_c = DelayedNavi;\n{/* 로그아웃 세션 */} // App.tsx\n\nfunction useLogout() {\n  _s2();\n  const [isLoggedIn, setLoggedIn] = useState(false);\n  const handleLogout = () => {\n    const userConfirmed = window.confirm('진짜 로그아웃 하게?');\n    if (userConfirmed) {\n      sessionStorage.removeItem('__bluecapsule__');\n      setLoggedIn(false);\n      setTimeout(() => {\n        window.location.reload(); // 새로고침\n      }, 500); // 0.25 초\n    } else {}\n  };\n  return {\n    isLoggedIn,\n    handleLogout\n  };\n}\n_s2(useLogout, \"9ogPs/qKjoLSy/tthqIGD5LodSI=\");\n{/* 로그인 시 토큰 체크 */}\nfunction ChecksToken() {\n  _s3();\n  const navigate = useNavigate();\n  const [isLoggedIn, setLoggedIn] = useState(false);\n  useEffect(() => {\n    const storedToken = sessionStorage.getItem('__bluecapsule__');\n    if (storedToken) {\n      setLoggedIn(true);\n      setTimeout(() => {\n        navigate('/');\n      }, 500); // 0.25초 후 이동\n    }\n  }, []);\n  return {\n    isLoggedIn\n  };\n}\n_s3(ChecksToken, \"asbqfMwpmr/vau6tqTIuPjL8PsM=\", false, function () {\n  return [useNavigate];\n});\n_c2 = ChecksToken;\n{/* 개인 페이지 - 토큰 확인 후 이미지 노출 */} // PresonalPage.tsx\n\nfunction ShowImagePrivate() {\n  _s4();\n  const [images, setImages] = useState([]);\n  const [userName, setUserName] = useState(null);\n  const triggerNavi = DelayedNavi();\n  useEffect(() => {\n    const Token = sessionStorage.getItem('__bluecapsule__');\n    const decodedToken = parseJwt(Token);\n    if (!Token) {\n      alert(\"올바른 경로로 접근하세요.\");\n      return triggerNavi(\"/\");\n    }\n    setUserName(decodedToken.name);\n    const fetchImages = async () => {\n      try {\n        const response = await fetch(`${process.env.REACT_APP_API_SERVER_APP}/ShowImagePrivate`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        if (!response.ok) {\n          throw new Error('Failed to fetch images');\n        }\n        const data = await response.json();\n        setImages(data.filter(images => images.name === userName));\n      } catch (error) {\n        console.error('Error fetching images: ', error);\n      }\n    };\n    fetchImages();\n  }, [userName]);\n  return {\n    images,\n    userName\n  };\n}\n_s4(ShowImagePrivate, \"neVZgn1DpO1A1w8KJnbFYfz1YIk=\");\n_c3 = ShowImagePrivate;\n{/* 이미지 에러 => 리로드 */} //PersonalPage.tsx \n\nfunction ImageError() {\n  _s5();\n  const [imageKey, setImageKey] = useState(1);\n  const [imageLoadError, setImageLoadError] = useState(false);\n  const handleImageError = () => {\n    setImageLoadError(true);\n    setImageKey(prevKey => prevKey + 1);\n  };\n  const handleImageLoaded = () => {\n    setImageLoadError(false);\n  };\n  return {\n    handleImageError,\n    handleImageLoaded\n  };\n}\n_s5(ImageError, \"qSDaL1/Nv+zHw1HCVli3hEeFDGo=\");\n_c4 = ImageError;\n{/* 로그인된 유저 이름 가져오기 */} // Upload.tsx\n\nfunction LoadUserName() {\n  _s6();\n  const [userName, setUserName] = useState('');\n  const Token = sessionStorage.getItem('__bluecapsule__');\n  const navigate = DelayedNavi();\n  useEffect(() => {\n    if (!Token) {\n      alert('올바른 경로로 접근하세요.');\n      navigate('/');\n    }\n    const storedToken = sessionStorage.getItem('__bluecapsule__');\n    if (storedToken) {\n      try {\n        const decodedToken = parseJwt(storedToken);\n        if (decodedToken && decodedToken.name) {\n          setUserName(decodedToken.name);\n        }\n      } catch (error) {\n        console.error('Error decoding token:', error);\n      }\n    }\n  }, [navigate]);\n  return {\n    userName,\n    Token,\n    setUserName\n  };\n}\n_s6(LoadUserName, \"00XnugoDycAozYiHGqQm3J8d29M=\");\n_c5 = LoadUserName;\n{/* 이미지 파일 삽입 / 업로드 */} // Upload.tsx\n\nfunction FileLoader() {\n  _s7();\n  const Token = sessionStorage.getItem('__bluecapsule__');\n  const decodedToken = parseJwt(Token);\n  const [userName, setUserName] = useState('');\n  const [file, setFile] = useState(null);\n  const [visibility, setVisibility] = useState('yes');\n  const [content, setContent] = useState('');\n  const [title, setTitle] = useState('');\n  const navigate = DelayedNavi();\n  useEffect(() => {\n    setUserName(decodedToken.name);\n  }, [decodedToken.name]);\n  const handleTitleChange = e => {\n    setTitle(e.target.value);\n  };\n  const handleContentChange = e => {\n    setContent(e.target.value);\n  };\n  const handleFileChange = e => {\n    const selectedFile = e.target.files && e.target.files[0];\n    if (selectedFile) {\n      if (selectedFile.type.startsWith('image/')) {\n        setFile(selectedFile);\n      } else {\n        alert('이미지 파일만 등록할 수 있음.');\n        if (e.target) {\n          e.target.value = '';\n        }\n        setFile(null);\n      }\n    }\n  };\n  const handleUpload = async () => {\n    try {\n      if (!file) {\n        alert(\"파일을 선택해주세요.\");\n        console.error('로그인이 안됐거나, 파일이 없거나..');\n        return;\n      }\n      if (!userName) {\n        alert(\"올바른 경로로 접근하셈.\");\n        console.error('로그인 안된 유저임.');\n        return;\n      }\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('id', userName);\n      formData.append('visibility', visibility);\n      formData.append('title', title);\n      formData.append('content', content);\n      const response = await fetch(`${process.env.REACT_APP_API_SERVER_APP}/upload`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${Token}`\n        },\n        body: formData\n      });\n      if (response.ok) {\n        alert('등록 완료');\n        setTimeout(() => {\n          navigate('/PersonalPage');\n        }, 500);\n      } else {\n        console.error('Upload failed:', response.statusText);\n      }\n    } catch (error) {\n      console.error('Error during upload:', error.message);\n    }\n  };\n  const handleVisibilityChange = e => {\n    setVisibility(e.target.value);\n  };\n  return {\n    handleFileChange,\n    handleUpload,\n    handleVisibilityChange,\n    handleTitleChange,\n    handleContentChange,\n    visibility,\n    title,\n    content\n  };\n}\n_s7(FileLoader, \"im7olicIrLuQb7w63Wkgo6QKxrk=\");\n_c6 = FileLoader;\n{/* 회원가입 */} // Registration.tsx\n\nfunction Registration_info() {\n  _s8();\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [isEmailDuplicate, setIsEmailDuplicate] = useState(false);\n  const [isNameDuplicate, setIsNameDuplicate] = useState(false);\n  const handleNameChange = e => {\n    setName(e.target.value);\n    setIsNameDuplicate(false);\n  };\n\n  // 이름 중복 확인\n  const handleCheckNameDuplicate = async e => {\n    e.preventDefault();\n    try {\n      const response = await fetch(`${process.env.REACT_APP_API_SERVER_APP}/checkName`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        if (data.isDuplicate) {\n          setIsNameDuplicate(true);\n          alert('이미 이름이 존재합니다.');\n        } else {\n          alert('사용 가능한 이름입니다.');\n        }\n      } else {\n        console.error('Failed to check for duplicate name.');\n      }\n    } catch (error) {\n      console.error('Error during duplicate check for name:', error.message);\n    }\n  };\n\n  // 이메일 중복 확인\n  const handleCheckEmailDuplicate = async e => {\n    e.preventDefault();\n    try {\n      const response = await fetch(`${process.env.REACT_APP_API_SERVER_APP}/checkEmail`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        if (data.isDuplicate) {\n          setIsEmailDuplicate(true);\n          alert('이미 이메일이 존재합니다.');\n        } else {\n          alert('사용 가능한 이메일입니다.');\n        }\n      } else {\n        console.error('Failed to check for duplicate email.');\n      }\n    } catch (error) {\n      console.error('Error during duplicate check for email:', error.message);\n    }\n  };\n  const handleEmailChange = e => {\n    setEmail(e.target.value);\n    setIsEmailDuplicate(false);\n  };\n  const handlePasswordChange = e => {\n    setPassword(e.target.value);\n  };\n  const handleResetForm = () => {\n    setName('');\n    setEmail('');\n    setPassword('');\n    setIsNameDuplicate(false);\n    setIsEmailDuplicate(false);\n  };\n\n  //회원 가입 하기\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      if (!name.trim() || !email.trim() || !password.trim()) {\n        alert('공백은 입력할 수 없음.');\n        return;\n      }\n      const duplicateEmailResponse = await fetch(`${process.env.REACT_APP_API_SERVER_APP}/checkEmail`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email\n        })\n      });\n      if (duplicateEmailResponse.ok) {\n        const duplicateEmailData = await duplicateEmailResponse.json();\n        if (duplicateEmailData.isDuplicate) {\n          setIsEmailDuplicate(true);\n          alert('이메일 있다자낭');\n          return;\n        }\n      } else {\n        console.error('Failed to check for duplicate email.');\n        return;\n      }\n      const duplicateNameResponse = await fetch(`${process.env.REACT_APP_API_SERVER_APP}/checkName`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name\n        })\n      });\n      if (duplicateNameResponse.ok) {\n        const duplicateNameData = await duplicateNameResponse.json();\n        if (duplicateNameData.isDuplicate) {\n          setIsNameDuplicate(true);\n          alert('이름 있다자낭');\n          return;\n        }\n      } else {\n        console.error('Failed to check for duplicate name.');\n        return;\n      }\n      const registrationResponse = await fetch(`${process.env.REACT_APP_API_SERVER_APP}/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name,\n          email,\n          password\n        })\n      });\n      if (registrationResponse.ok) {\n        const data = await registrationResponse.json();\n        alert('회원가입이 완료되었습니다.');\n        console.log('Registration successful:', data);\n        handleResetForm(); // Reset the form after successful registration\n      } else {\n        const errorData = await registrationResponse.json();\n        console.error('Registration failed:', errorData.error);\n      }\n    } catch (error) {\n      alert('다시 시도해주세요.');\n      console.error('Error during registration:', error.message);\n    }\n  };\n  return {\n    isEmailDuplicate,\n    isNameDuplicate,\n    handleNameChange,\n    handleCheckNameDuplicate,\n    handleCheckEmailDuplicate,\n    handleEmailChange,\n    handlePasswordChange,\n    handleSubmit,\n    handleResetForm,\n    name,\n    email,\n    password\n  };\n}\n\n// 이미지 클릭 후 해당 게시물로 이동할 때\n_s8(Registration_info, \"JOlRDvxNxr54lMETIiG4x5MgOwA=\");\n_c7 = Registration_info;\nfunction ShowPost(fileName) {\n  _s9();\n  const [contents, setContents] = useState(null);\n  const [userName, setUserName] = useState(null);\n  const [images, setImages] = useState([]);\n  const [title, setTitle] = useState(null);\n  const [day, setDay] = useState(null);\n  useEffect(() => {\n    const fetchContent = async () => {\n      const response = await fetch(`${process.env.REACT_APP_API_SERVER_APP}/ShowPost`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          fileName\n        })\n      });\n      const data = await response.json();\n      if (data.length > 0) {\n        const post = data[0];\n        setUserName((post === null || post === void 0 ? void 0 : post.name) || null);\n        setContents((post === null || post === void 0 ? void 0 : post.content) || null);\n        setImages((post === null || post === void 0 ? void 0 : post.images) || []);\n        setTitle((post === null || post === void 0 ? void 0 : post.title) || null);\n        setDay((post === null || post === void 0 ? void 0 : post.day) || null);\n      }\n    };\n    fetchContent();\n  }, [fileName]);\n  return {\n    contents,\n    userName,\n    images,\n    title,\n    day\n  };\n}\n_s9(ShowPost, \"/x5cKkkgRu//c/uaHEheIISUSdk=\");\n_c8 = ShowPost;\nexport default ShowPost;\n{/* 이미지 보이기 */}\nfunction ShowAllImages() {\n  _s10();\n  const [images, setImages] = useState([]);\n  useEffect(() => {\n    const fetchImages = async () => {\n      try {\n        const response = await fetch(`${process.env.REACT_APP_API_SERVER_APP}/ShowImage`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        if (!response.ok) {\n          throw new Error('Failed to fetch images');\n        }\n        const data = await response.json();\n        setImages(data);\n      } catch (error) {\n        console.error('Error fetching images:', error);\n      }\n    };\n    fetchImages();\n  }, []);\n  return {\n    ShowAllImages,\n    images\n  };\n}\n_s10(ShowAllImages, \"ScKwoilS3xNJP1q5r1COmrAdDIM=\");\n_c9 = ShowAllImages;\n{/* 페이지 넘기기 버튼 */}\nexport { DelayedNavi, useLogout, ChecksToken, ShowImagePrivate, ImageError, LoadUserName, FileLoader, Registration_info, ShowPost, ShowAllImages };\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9;\n$RefreshReg$(_c, \"DelayedNavi\");\n$RefreshReg$(_c2, \"ChecksToken\");\n$RefreshReg$(_c3, \"ShowImagePrivate\");\n$RefreshReg$(_c4, \"ImageError\");\n$RefreshReg$(_c5, \"LoadUserName\");\n$RefreshReg$(_c6, \"FileLoader\");\n$RefreshReg$(_c7, \"Registration_info\");\n$RefreshReg$(_c8, \"ShowPost\");\n$RefreshReg$(_c9, \"ShowAllImages\");","map":{"version":3,"names":["useState","useEffect","useNavigate","parseJwt","DelayedNavi","_s","navigate","delayedNavigation","setDelayedNavigation","triggerDelayedNavigation","to","options","setTimeout","_c","useLogout","_s2","isLoggedIn","setLoggedIn","handleLogout","userConfirmed","window","confirm","sessionStorage","removeItem","location","reload","ChecksToken","_s3","storedToken","getItem","_c2","ShowImagePrivate","_s4","images","setImages","userName","setUserName","triggerNavi","Token","decodedToken","alert","name","fetchImages","response","fetch","process","env","REACT_APP_API_SERVER_APP","method","headers","ok","Error","data","json","filter","error","console","_c3","ImageError","_s5","imageKey","setImageKey","imageLoadError","setImageLoadError","handleImageError","prevKey","handleImageLoaded","_c4","LoadUserName","_s6","_c5","FileLoader","_s7","file","setFile","visibility","setVisibility","content","setContent","title","setTitle","handleTitleChange","e","target","value","handleContentChange","handleFileChange","selectedFile","files","type","startsWith","handleUpload","formData","FormData","append","body","statusText","message","handleVisibilityChange","_c6","Registration_info","_s8","setName","email","setEmail","password","setPassword","isEmailDuplicate","setIsEmailDuplicate","isNameDuplicate","setIsNameDuplicate","handleNameChange","handleCheckNameDuplicate","preventDefault","JSON","stringify","isDuplicate","handleCheckEmailDuplicate","handleEmailChange","handlePasswordChange","handleResetForm","handleSubmit","trim","duplicateEmailResponse","duplicateEmailData","duplicateNameResponse","duplicateNameData","registrationResponse","log","errorData","_c7","ShowPost","fileName","_s9","contents","setContents","day","setDay","fetchContent","length","post","_c8","ShowAllImages","_s10","_c9","$RefreshReg$"],"sources":["C:/Users/saint/webpro/webpro/src/modules/Hooks.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { NavigateFunction, NavigateOptions, useNavigate, To } from 'react-router-dom';\r\nimport { parseJwt } from './Modules';\r\n\r\n\r\n\r\n{/* 딜레이 적용한 네비게이션 */ }\r\n\r\nfunction DelayedNavi(): NavigateFunction {\r\n  const navigate = useNavigate();\r\n  const [delayedNavigation, setDelayedNavigation] = useState(false);\r\n\r\n  const triggerDelayedNavigation: NavigateFunction = (to: To | any, options?: NavigateOptions) => {\r\n    setDelayedNavigation(true);\r\n    setTimeout(() => {\r\n      navigate(to, options);\r\n      setDelayedNavigation(false);\r\n    }, 500); \r\n  };\r\n\r\n  return triggerDelayedNavigation;\r\n}\r\n\r\n\r\n{/* 로그아웃 세션 */ } // App.tsx\r\n\r\nfunction useLogout() {\r\n    const [isLoggedIn, setLoggedIn] = useState(false);\r\n\r\n    const handleLogout = () => {\r\n        const userConfirmed = window.confirm('진짜 로그아웃 하게?');\r\n\r\n        if (userConfirmed) {\r\n            sessionStorage.removeItem('__bluecapsule__');\r\n            setLoggedIn(false);\r\n            setTimeout(() => {\r\n                window.location.reload(); // 새로고침\r\n            }, 500); // 0.25 초\r\n\r\n        } else {\r\n\r\n        }\r\n    };\r\n\r\n    return {\r\n        isLoggedIn,\r\n        handleLogout,\r\n    };\r\n}\r\n\r\n\r\n{/* 로그인 시 토큰 체크 */ } \r\n\r\nfunction ChecksToken() {\r\n    const navigate = useNavigate();\r\n    const [isLoggedIn, setLoggedIn] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const storedToken = sessionStorage.getItem('__bluecapsule__');\r\n\r\n        if (storedToken) {\r\n            setLoggedIn(true);\r\n            setTimeout(() => {\r\n                navigate('/');\r\n            }, 500); // 0.25초 후 이동\r\n        }\r\n    }, []);\r\n\r\n    return { isLoggedIn };\r\n}\r\n\r\n\r\n{/* 개인 페이지 - 토큰 확인 후 이미지 노출 */ } // PresonalPage.tsx\r\n\r\nfunction ShowImagePrivate() {\r\n\r\n    const [images, setImages] = useState<any[]>([]);\r\n    const [userName, setUserName] = useState<string | null>(null);\r\n    const triggerNavi = DelayedNavi();\r\n\r\n    useEffect(() => {\r\n        const Token: any = sessionStorage.getItem('__bluecapsule__');\r\n        const decodedToken = parseJwt(Token);\r\n        if (!Token) {\r\n            alert(\"올바른 경로로 접근하세요.\")\r\n            return triggerNavi(\"/\")\r\n        }\r\n        setUserName(decodedToken.name);\r\n\r\n        const fetchImages = async () => {\r\n            try {\r\n                const response = await fetch(`${process.env.REACT_APP_API_SERVER_APP}/ShowImagePrivate`, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                });\r\n\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch images');\r\n                }\r\n                const data = await response.json();\r\n                setImages(data.filter((images: any) => images.name === userName));\r\n            } catch (error: any) {\r\n                console.error('Error fetching images: ', error);\r\n            }\r\n        };\r\n        fetchImages();\r\n    }, [userName]);\r\n\r\n    return { images, userName };\r\n}\r\n\r\n\r\n{/* 이미지 에러 => 리로드 */ } //PersonalPage.tsx \r\n\r\nfunction ImageError() {\r\n    const [imageKey, setImageKey] = useState(1);\r\n    const [imageLoadError, setImageLoadError] = useState(false);\r\n\r\n    const handleImageError = () => {\r\n        setImageLoadError(true);\r\n        setImageKey(prevKey => prevKey + 1);\r\n    }\r\n    const handleImageLoaded = () => {\r\n        setImageLoadError(false);\r\n    }\r\n\r\n    return { handleImageError, handleImageLoaded };\r\n}\r\n\r\n\r\n{/* 로그인된 유저 이름 가져오기 */ } // Upload.tsx\r\n\r\nfunction LoadUserName() {\r\n    const [userName, setUserName] = useState<string>('');\r\n    const Token: any = sessionStorage.getItem('__bluecapsule__');\r\n    const navigate = DelayedNavi();\r\n\r\n    useEffect(() => {\r\n        if (!Token) {\r\n            alert('올바른 경로로 접근하세요.');\r\n            navigate('/');\r\n        }\r\n        const storedToken = sessionStorage.getItem('__bluecapsule__');\r\n\r\n        if (storedToken) {\r\n            try {\r\n                const decodedToken: any = parseJwt(storedToken);\r\n\r\n                if (decodedToken && decodedToken.name) {\r\n                    setUserName(decodedToken.name);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error decoding token:', error);\r\n            }\r\n        }\r\n\r\n    }, [navigate]);\r\n\r\n    return { userName, Token, setUserName };\r\n}\r\n\r\n\r\n{/* 이미지 파일 삽입 / 업로드 */ } // Upload.tsx\r\n\r\nfunction FileLoader() {\r\n\r\n    const Token: any = sessionStorage.getItem('__bluecapsule__');\r\n    const decodedToken: any = parseJwt(Token);\r\n    const [userName, setUserName] = useState<string>('');\r\n    const [file, setFile] = useState<File | null>(null);\r\n    const [visibility, setVisibility] = useState<string>('yes');\r\n    const [content, setContent] = useState<string>('');\r\n    const [title, setTitle] = useState<string>('');\r\n    const navigate = DelayedNavi();\r\n\r\n    useEffect(() => {\r\n        setUserName(decodedToken.name);\r\n      }, [decodedToken.name]);\r\n\r\n    const handleTitleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      setTitle(e.target.value);\r\n    }\r\n    const handleContentChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n      setContent(e.target.value);\r\n    }\r\n\r\n    const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const selectedFile = e.target.files && e.target.files[0];\r\n\r\n        if (selectedFile) {\r\n            if (selectedFile.type.startsWith('image/')) {\r\n                setFile(selectedFile);\r\n            } else {\r\n                alert('이미지 파일만 등록할 수 있음.');\r\n                if (e.target) {\r\n                    e.target.value = '';\r\n                }\r\n                setFile(null);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleUpload = async () => {\r\n        try {\r\n            if (!file) {\r\n                alert(\"파일을 선택해주세요.\")\r\n                console.error('로그인이 안됐거나, 파일이 없거나..');\r\n                return;\r\n            }\r\n            if (!userName) {\r\n                alert(\"올바른 경로로 접근하셈.\")\r\n                console.error('로그인 안된 유저임.')\r\n                return;\r\n            }\r\n\r\n            const formData = new FormData();\r\n            formData.append('file', file);\r\n            formData.append('id', userName);\r\n            formData.append('visibility', visibility);\r\n            formData.append('title', title);\r\n            formData.append('content', content);\r\n\r\n            const response = await fetch(`${process.env.REACT_APP_API_SERVER_APP}/upload`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Authorization': `Bearer ${Token}`,\r\n                },\r\n                body: formData,\r\n            });\r\n\r\n            if (response.ok) {\r\n                alert('등록 완료');\r\n                \r\n                setTimeout(() => {\r\n                    navigate('/PersonalPage');\r\n                }, 500);\r\n            } else {\r\n                console.error('Upload failed:', response.statusText);\r\n            }\r\n        } catch (error: any) {\r\n            console.error('Error during upload:', error.message);\r\n        }\r\n    };\r\n\r\n    const handleVisibilityChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n        setVisibility(e.target.value);\r\n      };\r\n    \r\n    return {handleFileChange,\r\n            handleUpload,\r\n            handleVisibilityChange,\r\n            handleTitleChange,\r\n            handleContentChange,\r\n            visibility, \r\n            title, \r\n            content };\r\n}\r\n\r\n\r\n{/* 회원가입 */ } // Registration.tsx\r\n\r\nfunction Registration_info() {\r\n    const [name, setName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [isEmailDuplicate, setIsEmailDuplicate] = useState(false);\r\n    const [isNameDuplicate, setIsNameDuplicate] = useState(false);\r\n  \r\n    const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      setName(e.target.value);\r\n      setIsNameDuplicate(false);\r\n    };\r\n  \r\n    // 이름 중복 확인\r\n    const handleCheckNameDuplicate = async (e: React.MouseEvent<HTMLButtonElement>) => {\r\n      e.preventDefault();\r\n      try {\r\n  \r\n        const response = await fetch(\r\n          `${process.env.REACT_APP_API_SERVER_APP}/checkName`,\r\n          {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ name }),\r\n          }\r\n        );\r\n  \r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          if (data.isDuplicate) {\r\n            setIsNameDuplicate(true);\r\n            alert('이미 이름이 존재합니다.');\r\n          } else {\r\n            alert('사용 가능한 이름입니다.');\r\n          }\r\n        } else {\r\n          console.error('Failed to check for duplicate name.');\r\n        }\r\n      } catch (error: any) {\r\n        console.error('Error during duplicate check for name:', error.message);\r\n      }\r\n    };\r\n  \r\n    // 이메일 중복 확인\r\n    const handleCheckEmailDuplicate = async (e: React.MouseEvent<HTMLButtonElement>) => {\r\n      e.preventDefault();\r\n      try {\r\n  \r\n        const response = await fetch(\r\n          `${process.env.REACT_APP_API_SERVER_APP}/checkEmail`,\r\n          {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ email }),\r\n          }\r\n        );\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          if (data.isDuplicate) {\r\n            setIsEmailDuplicate(true);\r\n            alert('이미 이메일이 존재합니다.');\r\n          } else {\r\n            alert('사용 가능한 이메일입니다.');\r\n          }\r\n        } else {\r\n          console.error('Failed to check for duplicate email.');\r\n        }\r\n      } catch (error: any) {\r\n        console.error('Error during duplicate check for email:', error.message);\r\n      }\r\n    };\r\n  \r\n    const handleEmailChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      setEmail(e.target.value);\r\n      setIsEmailDuplicate(false);\r\n    };\r\n  \r\n    const handlePasswordChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      setPassword(e.target.value);\r\n    };\r\n  \r\n  \r\n  \r\n    const handleResetForm = () => {\r\n      setName('');\r\n      setEmail('');\r\n      setPassword('');\r\n      setIsNameDuplicate(false);\r\n      setIsEmailDuplicate(false);\r\n    };\r\n  \r\n  \r\n    //회원 가입 하기\r\n    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n      e.preventDefault();\r\n  \r\n      try {\r\n  \r\n        if (!name.trim() || !email.trim() || !password.trim()) {\r\n          alert('공백은 입력할 수 없음.');\r\n          return;\r\n        }\r\n  \r\n        const duplicateEmailResponse = await fetch(`${process.env.REACT_APP_API_SERVER_APP}/checkEmail`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({ email }),\r\n        });\r\n  \r\n        if (duplicateEmailResponse.ok) {\r\n          const duplicateEmailData = await duplicateEmailResponse.json();\r\n          if (duplicateEmailData.isDuplicate) {\r\n            setIsEmailDuplicate(true);\r\n            alert('이메일 있다자낭');\r\n            return;\r\n          }\r\n        } else {\r\n          console.error('Failed to check for duplicate email.');\r\n          return;\r\n        }\r\n  \r\n        const duplicateNameResponse = await fetch(`${process.env.REACT_APP_API_SERVER_APP}/checkName`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({ name }),\r\n        });\r\n  \r\n        if (duplicateNameResponse.ok) {\r\n          const duplicateNameData = await duplicateNameResponse.json();\r\n          if (duplicateNameData.isDuplicate) {\r\n            setIsNameDuplicate(true);\r\n            alert('이름 있다자낭');\r\n            return;\r\n          }\r\n        } else {\r\n          console.error('Failed to check for duplicate name.');\r\n          return;\r\n        }\r\n  \r\n        const registrationResponse = await fetch(`${process.env.REACT_APP_API_SERVER_APP}/register`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({ name, email, password }),\r\n        });\r\n  \r\n        if (registrationResponse.ok) {\r\n          const data = await registrationResponse.json();\r\n          alert('회원가입이 완료되었습니다.');\r\n          console.log('Registration successful:', data);\r\n          handleResetForm(); // Reset the form after successful registration\r\n        } else {\r\n          const errorData = await registrationResponse.json();\r\n          console.error('Registration failed:', errorData.error);\r\n        }\r\n      } catch (error: any) {\r\n        alert('다시 시도해주세요.');\r\n        console.error('Error during registration:', error.message);\r\n      }\r\n    };\r\n    return {\r\n            isEmailDuplicate, \r\n            isNameDuplicate, \r\n            handleNameChange, \r\n            handleCheckNameDuplicate,\r\n            handleCheckEmailDuplicate,\r\n            handleEmailChange,\r\n            handlePasswordChange,\r\n            handleSubmit,\r\n            handleResetForm,\r\n            name,\r\n            email,\r\n            password\r\n        }\r\n}\r\n\r\n\r\n// 이미지 클릭 후 해당 게시물로 이동할 때\r\n\r\nfunction ShowPost(fileName: string) {\r\n  const [contents, setContents] = useState<string | null>(null);\r\n  const [userName, setUserName] = useState<string | null>(null);\r\n  const [images, setImages] = useState<any[]>([]);\r\n  const [title, setTitle] = useState<string | null>(null);\r\n  const [day, setDay] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    const fetchContent = async () => {\r\n        const response = await fetch(`${process.env.REACT_APP_API_SERVER_APP}/ShowPost`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({ fileName }), \r\n        });\r\n\r\n        const data = await response.json();\r\n\r\n        if (data.length > 0) {\r\n          const post = data[0];\r\n\r\n          setUserName(post?.name || null);\r\n          setContents(post?.content || null);\r\n          setImages(post?.images || []);\r\n          setTitle(post?.title || null);\r\n          setDay(post?.day || null);\r\n        } \r\n\r\n    };\r\n\r\n    fetchContent();\r\n  }, [fileName]); \r\n\r\n  return { contents, userName, images, title, day };\r\n}\r\n\r\nexport default ShowPost;\r\n\r\n{/* 이미지 보이기 */}\r\n\r\nfunction ShowAllImages() {\r\n  const [images, setImages] = useState<any[]>([]);\r\n\r\n  useEffect(() => {\r\n  const fetchImages = async () => {\r\n    try {\r\n      const response = await fetch(`${process.env.REACT_APP_API_SERVER_APP}/ShowImage`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch images');\r\n      }\r\n\r\n      const data = await response.json();\r\n      setImages(data);\r\n    } catch (error: any) {\r\n      console.error('Error fetching images:', error);\r\n    }\r\n  };\r\n  fetchImages();\r\n}, []);\r\n\r\n  return { ShowAllImages, images}\r\n}\r\n\r\n\r\n{/* 페이지 넘기기 버튼 */}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport {\r\n    DelayedNavi,\r\n    useLogout,\r\n    ChecksToken,\r\n    ShowImagePrivate,\r\n    ImageError,\r\n    LoadUserName,\r\n    FileLoader,\r\n    Registration_info,\r\n    ShowPost,\r\n    ShowAllImages\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}