{"ast":null,"code":"import cryptoJs from \"crypto-js\";\nfunction Kst_modules() {\n  const secretKey = `${process.env.REACT_APP_DB_SECRETKEY}`;\n  const iv = `${process.env.REACT_APP_DB_IV}`;\n\n  // 암호화\n  const encrypt = text => {\n    const cipher = cryptoJs.AES.encrypt(text, cryptoJs.enc.Utf8.parse(secretKey), {\n      iv: cryptoJs.enc.Utf8.parse(iv),\n      padding: cryptoJs.pad.Pkcs7,\n      mode: cryptoJs.mode.CBC\n    });\n    return cipher.toString();\n  };\n\n  // 복호화\n  const decrypt = encryptedText => {\n    const decipher = cryptoJs.AES.decrypt(encryptedText, cryptoJs.enc.Utf8.parse(secretKey), {\n      iv: cryptoJs.enc.Utf8.parse(iv),\n      padding: cryptoJs.pad.Pkcs7,\n      mode: cryptoJs.mode.CBC\n    });\n    return decipher.toString(cryptoJs.enc.Utf8);\n  };\n  {/* 토큰키 파싱 모듈 */}\n  const parseJwt = token => {\n    if (!token) {\n      // console.error('Token is undefined or null');\n      return null;\n    }\n    const parts = token.split('.');\n    if (parts.length !== 3) {\n      // console.error('Token does not have the expected structure');\n      return null;\n    }\n    const base64Url = parts[1];\n    if (!base64Url) {\n      // console.error('Base64Url is undefined or null');\n      return null;\n    }\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    try {\n      const jsonPayload = decodeURIComponent(atob(base64).split('').map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)).join(''));\n      return JSON.parse(jsonPayload);\n    } catch (error) {\n      // console.error('Error parsing JWT:', error);\n      return null;\n    }\n  };\n  {/* */}\n}\n_c = Kst_modules;\nexport default Kst_modules;\nvar _c;\n$RefreshReg$(_c, \"Kst_modules\");","map":{"version":3,"names":["cryptoJs","Kst_modules","secretKey","process","env","REACT_APP_DB_SECRETKEY","iv","REACT_APP_DB_IV","encrypt","text","cipher","AES","enc","Utf8","parse","padding","pad","Pkcs7","mode","CBC","toString","decrypt","encryptedText","decipher","parseJwt","token","parts","split","length","base64Url","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","slice","join","JSON","error","_c","$RefreshReg$"],"sources":["C:/Users/saint/webpro/webpro/src/modules/Kst_modules.ts"],"sourcesContent":["import cryptoJs from \"crypto-js\";\r\n\r\nfunction Kst_modules() {\r\n  const secretKey = `${process.env.REACT_APP_DB_SECRETKEY}`;\r\n  const iv = `${process.env.REACT_APP_DB_IV}`;\r\n\r\n  // 암호화\r\n  const encrypt = (text: string): any => {\r\n    const cipher = cryptoJs.AES.encrypt(text, cryptoJs.enc.Utf8.parse(secretKey), {\r\n      iv: cryptoJs.enc.Utf8.parse(iv),\r\n      padding: cryptoJs.pad.Pkcs7,\r\n      mode: cryptoJs.mode.CBC,\r\n    });\r\n\r\n    return cipher.toString();\r\n  }\r\n\r\n  // 복호화\r\n  const decrypt = (encryptedText: string): any => {\r\n    const decipher = cryptoJs.AES.decrypt(encryptedText, cryptoJs.enc.Utf8.parse(secretKey), {\r\n      iv: cryptoJs.enc.Utf8.parse(iv),\r\n      padding: cryptoJs.pad.Pkcs7,\r\n      mode: cryptoJs.mode.CBC,\r\n    });\r\n    return decipher.toString(cryptoJs.enc.Utf8);\r\n  }\r\n\r\n\r\n  {/* 토큰키 파싱 모듈 */ }\r\n\r\n  const  parseJwt = (token: string): any => {\r\n    if (!token) {\r\n      // console.error('Token is undefined or null');\r\n      return null;\r\n    }\r\n\r\n    const parts = token.split('.');\r\n\r\n    if (parts.length !== 3) {\r\n      // console.error('Token does not have the expected structure');\r\n      return null;\r\n    }\r\n\r\n    const base64Url = parts[1];\r\n\r\n    if (!base64Url) {\r\n      // console.error('Base64Url is undefined or null');\r\n      return null;\r\n    }\r\n\r\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n\r\n    try {\r\n      const jsonPayload = decodeURIComponent(\r\n        atob(base64)\r\n          .split('')\r\n          .map((c) => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\r\n          .join('')\r\n      );\r\n\r\n      return JSON.parse(jsonPayload);\r\n    } catch (error) {\r\n      // console.error('Error parsing JWT:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  {/* */ }\r\n}\r\n\r\nexport default Kst_modules;"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,WAAW;AAEhC,SAASC,WAAWA,CAAA,EAAG;EACrB,MAAMC,SAAS,GAAI,GAAEC,OAAO,CAACC,GAAG,CAACC,sBAAuB,EAAC;EACzD,MAAMC,EAAE,GAAI,GAAEH,OAAO,CAACC,GAAG,CAACG,eAAgB,EAAC;;EAE3C;EACA,MAAMC,OAAO,GAAIC,IAAY,IAAU;IACrC,MAAMC,MAAM,GAAGV,QAAQ,CAACW,GAAG,CAACH,OAAO,CAACC,IAAI,EAAET,QAAQ,CAACY,GAAG,CAACC,IAAI,CAACC,KAAK,CAACZ,SAAS,CAAC,EAAE;MAC5EI,EAAE,EAAEN,QAAQ,CAACY,GAAG,CAACC,IAAI,CAACC,KAAK,CAACR,EAAE,CAAC;MAC/BS,OAAO,EAAEf,QAAQ,CAACgB,GAAG,CAACC,KAAK;MAC3BC,IAAI,EAAElB,QAAQ,CAACkB,IAAI,CAACC;IACtB,CAAC,CAAC;IAEF,OAAOT,MAAM,CAACU,QAAQ,CAAC,CAAC;EAC1B,CAAC;;EAED;EACA,MAAMC,OAAO,GAAIC,aAAqB,IAAU;IAC9C,MAAMC,QAAQ,GAAGvB,QAAQ,CAACW,GAAG,CAACU,OAAO,CAACC,aAAa,EAAEtB,QAAQ,CAACY,GAAG,CAACC,IAAI,CAACC,KAAK,CAACZ,SAAS,CAAC,EAAE;MACvFI,EAAE,EAAEN,QAAQ,CAACY,GAAG,CAACC,IAAI,CAACC,KAAK,CAACR,EAAE,CAAC;MAC/BS,OAAO,EAAEf,QAAQ,CAACgB,GAAG,CAACC,KAAK;MAC3BC,IAAI,EAAElB,QAAQ,CAACkB,IAAI,CAACC;IACtB,CAAC,CAAC;IACF,OAAOI,QAAQ,CAACH,QAAQ,CAACpB,QAAQ,CAACY,GAAG,CAACC,IAAI,CAAC;EAC7C,CAAC;EAGD,CAAC;EAED,MAAOW,QAAQ,GAAIC,KAAa,IAAU;IACxC,IAAI,CAACA,KAAK,EAAE;MACV;MACA,OAAO,IAAI;IACb;IAEA,MAAMC,KAAK,GAAGD,KAAK,CAACE,KAAK,CAAC,GAAG,CAAC;IAE9B,IAAID,KAAK,CAACE,MAAM,KAAK,CAAC,EAAE;MACtB;MACA,OAAO,IAAI;IACb;IAEA,MAAMC,SAAS,GAAGH,KAAK,CAAC,CAAC,CAAC;IAE1B,IAAI,CAACG,SAAS,EAAE;MACd;MACA,OAAO,IAAI;IACb;IAEA,MAAMC,MAAM,GAAGD,SAAS,CAACE,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;IAE9D,IAAI;MACF,MAAMC,WAAW,GAAGC,kBAAkB,CACpCC,IAAI,CAACJ,MAAM,CAAC,CACTH,KAAK,CAAC,EAAE,CAAC,CACTQ,GAAG,CAAEC,CAAC,IAAK,GAAG,GAAG,CAAC,IAAI,GAAGA,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC,CAACjB,QAAQ,CAAC,EAAE,CAAC,EAAEkB,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CACjEC,IAAI,CAAC,EAAE,CACZ,CAAC;MAED,OAAOC,IAAI,CAAC1B,KAAK,CAACkB,WAAW,CAAC;IAChC,CAAC,CAAC,OAAOS,KAAK,EAAE;MACd;MACA,OAAO,IAAI;IACb;EACF,CAAC;EAED,CAAC;AACH;AAACC,EAAA,GAlEQzC,WAAW;AAoEpB,eAAeA,WAAW;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}