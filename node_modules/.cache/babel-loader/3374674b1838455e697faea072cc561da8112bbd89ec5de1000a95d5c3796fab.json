{"ast":null,"code":"import { useState } from 'react';\nimport cryptoJs from \"crypto-js\";\nconst secretKey = `${process.env.REACT_APP_DB_SECRETKEY}`;\nconst iv = `${process.env.REACT_APP_DB_IV}`;\n{/* 암호화 */}\nexport function encrypt(text) {\n  const cipher = cryptoJs.AES.encrypt(text, cryptoJs.enc.Utf8.parse(secretKey), {\n    iv: cryptoJs.enc.Utf8.parse(iv),\n    padding: cryptoJs.pad.Pkcs7,\n    mode: cryptoJs.mode.CBC\n  });\n  return cipher.toString();\n}\n{/* 복호화 */}\nexport function decrypt(encryptedText) {\n  const decipher = cryptoJs.AES.decrypt(encryptedText, cryptoJs.enc.Utf8.parse(secretKey), {\n    iv: cryptoJs.enc.Utf8.parse(iv),\n    padding: cryptoJs.pad.Pkcs7,\n    mode: cryptoJs.mode.CBC\n  });\n  return decipher.toString(cryptoJs.enc.Utf8);\n}\n{/* 토큰 파싱 */}\nexport function parseJwt(token) {\n  if (!token) {\n    return null;\n  }\n  const parts = token.split('.');\n  if (parts.length !== 3) {\n    return null;\n  }\n  const base64Url = parts[1];\n  if (!base64Url) {\n    return null;\n  }\n  const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n  try {\n    const jsonPayload = decodeURIComponent(atob(base64).split('').map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)).join(''));\n    return JSON.parse(jsonPayload);\n  } catch (error) {\n    return null;\n  }\n}\n{/* 날짜 형식 지정 */}\nexport function formatTime(dateTimeString) {\n  const options = {\n    year: 'numeric',\n    month: 'numeric',\n    day: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    hour12: false\n  };\n  const dateTime = new Date(dateTimeString);\n  return dateTime.toLocaleString(undefined, options);\n}\nconst [imageKey, setImageKey] = useState(1);\nconst [imageLoadError, setImageLoadError] = useState(false);\nexport const handleImageError = () => {\n  setImageLoadError(true);\n  setImageKey(prevKey => prevKey + 1);\n  return handleImageError;\n};\nexport const handleImageLoaded = () => {\n  setImageLoadError(false);\n  return handleImageLoaded;\n};","map":{"version":3,"names":["useState","cryptoJs","secretKey","process","env","REACT_APP_DB_SECRETKEY","iv","REACT_APP_DB_IV","encrypt","text","cipher","AES","enc","Utf8","parse","padding","pad","Pkcs7","mode","CBC","toString","decrypt","encryptedText","decipher","parseJwt","token","parts","split","length","base64Url","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","slice","join","JSON","error","formatTime","dateTimeString","options","year","month","day","hour","minute","hour12","dateTime","Date","toLocaleString","undefined","imageKey","setImageKey","imageLoadError","setImageLoadError","handleImageError","prevKey","handleImageLoaded"],"sources":["C:/Users/saint/webpro/webpro/src/modules/Kst_modules.ts"],"sourcesContent":["import React, {useState} from 'react';\r\nimport cryptoJs from \"crypto-js\";\r\n\r\nconst secretKey = `${process.env.REACT_APP_DB_SECRETKEY}`;\r\nconst iv = `${process.env.REACT_APP_DB_IV}`;\r\n\r\n{/* 암호화 */}\r\n\r\nexport function encrypt(text: string): any {\r\n  const cipher = cryptoJs.AES.encrypt(text, cryptoJs.enc.Utf8.parse(secretKey), {\r\n    iv: cryptoJs.enc.Utf8.parse(iv),\r\n    padding: cryptoJs.pad.Pkcs7,\r\n    mode: cryptoJs.mode.CBC,\r\n  });\r\n\r\n  return cipher.toString();\r\n}\r\n\r\n\r\n{/* 복호화 */}\r\n\r\nexport function decrypt(encryptedText: string): any {\r\n  const decipher = cryptoJs.AES.decrypt(encryptedText, cryptoJs.enc.Utf8.parse(secretKey), {\r\n    iv: cryptoJs.enc.Utf8.parse(iv),\r\n    padding: cryptoJs.pad.Pkcs7,\r\n    mode: cryptoJs.mode.CBC,\r\n  });\r\n  return decipher.toString(cryptoJs.enc.Utf8);\r\n}\r\n\r\n\r\n{/* 토큰 파싱 */}\r\n\r\nexport function parseJwt(token: string): any {\r\n  if (!token) {\r\n    return null;\r\n  }\r\n\r\n  const parts = token.split('.');\r\n\r\n  if (parts.length !== 3) {\r\n    return null;\r\n  }\r\n\r\n  const base64Url = parts[1];\r\n\r\n  if (!base64Url) {\r\n    return null;\r\n  }\r\n\r\n  const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n\r\n  try {\r\n    const jsonPayload = decodeURIComponent(\r\n      atob(base64)\r\n        .split('')\r\n        .map((c) => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\r\n        .join('')\r\n    );\r\n\r\n    return JSON.parse(jsonPayload);\r\n  } catch (error) {\r\n    return null;\r\n  }\r\n}\r\n\r\n\r\n{/* 날짜 형식 지정 */}\r\n\r\nexport function formatTime(dateTimeString: string): string {\r\n  const options: Intl.DateTimeFormatOptions = {\r\n    year: 'numeric',\r\n    month: 'numeric',\r\n    day: 'numeric',\r\n    hour: 'numeric',\r\n    minute: 'numeric',\r\n    hour12: false,\r\n}\r\n\r\nconst dateTime = new Date(dateTimeString);\r\nreturn dateTime.toLocaleString(undefined, options);\r\n}\r\nconst [imageKey, setImageKey] = useState(1);\r\nconst [imageLoadError, setImageLoadError] = useState(false);\r\nexport const handleImageError = () => {\r\n  setImageLoadError(true);\r\n\r\n  setImageKey(prevKey => prevKey + 1 );\r\n  return handleImageError;\r\n};\r\n\r\nexport const handleImageLoaded = () => {\r\n  setImageLoadError(false);\r\n\r\n  return handleImageLoaded;\r\n}"],"mappings":"AAAA,SAAeA,QAAQ,QAAO,OAAO;AACrC,OAAOC,QAAQ,MAAM,WAAW;AAEhC,MAAMC,SAAS,GAAI,GAAEC,OAAO,CAACC,GAAG,CAACC,sBAAuB,EAAC;AACzD,MAAMC,EAAE,GAAI,GAAEH,OAAO,CAACC,GAAG,CAACG,eAAgB,EAAC;AAE3C,CAAC;AAED,OAAO,SAASC,OAAOA,CAACC,IAAY,EAAO;EACzC,MAAMC,MAAM,GAAGT,QAAQ,CAACU,GAAG,CAACH,OAAO,CAACC,IAAI,EAAER,QAAQ,CAACW,GAAG,CAACC,IAAI,CAACC,KAAK,CAACZ,SAAS,CAAC,EAAE;IAC5EI,EAAE,EAAEL,QAAQ,CAACW,GAAG,CAACC,IAAI,CAACC,KAAK,CAACR,EAAE,CAAC;IAC/BS,OAAO,EAAEd,QAAQ,CAACe,GAAG,CAACC,KAAK;IAC3BC,IAAI,EAAEjB,QAAQ,CAACiB,IAAI,CAACC;EACtB,CAAC,CAAC;EAEF,OAAOT,MAAM,CAACU,QAAQ,CAAC,CAAC;AAC1B;AAGA,CAAC;AAED,OAAO,SAASC,OAAOA,CAACC,aAAqB,EAAO;EAClD,MAAMC,QAAQ,GAAGtB,QAAQ,CAACU,GAAG,CAACU,OAAO,CAACC,aAAa,EAAErB,QAAQ,CAACW,GAAG,CAACC,IAAI,CAACC,KAAK,CAACZ,SAAS,CAAC,EAAE;IACvFI,EAAE,EAAEL,QAAQ,CAACW,GAAG,CAACC,IAAI,CAACC,KAAK,CAACR,EAAE,CAAC;IAC/BS,OAAO,EAAEd,QAAQ,CAACe,GAAG,CAACC,KAAK;IAC3BC,IAAI,EAAEjB,QAAQ,CAACiB,IAAI,CAACC;EACtB,CAAC,CAAC;EACF,OAAOI,QAAQ,CAACH,QAAQ,CAACnB,QAAQ,CAACW,GAAG,CAACC,IAAI,CAAC;AAC7C;AAGA,CAAC;AAED,OAAO,SAASW,QAAQA,CAACC,KAAa,EAAO;EAC3C,IAAI,CAACA,KAAK,EAAE;IACV,OAAO,IAAI;EACb;EAEA,MAAMC,KAAK,GAAGD,KAAK,CAACE,KAAK,CAAC,GAAG,CAAC;EAE9B,IAAID,KAAK,CAACE,MAAM,KAAK,CAAC,EAAE;IACtB,OAAO,IAAI;EACb;EAEA,MAAMC,SAAS,GAAGH,KAAK,CAAC,CAAC,CAAC;EAE1B,IAAI,CAACG,SAAS,EAAE;IACd,OAAO,IAAI;EACb;EAEA,MAAMC,MAAM,GAAGD,SAAS,CAACE,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;EAE9D,IAAI;IACF,MAAMC,WAAW,GAAGC,kBAAkB,CACpCC,IAAI,CAACJ,MAAM,CAAC,CACTH,KAAK,CAAC,EAAE,CAAC,CACTQ,GAAG,CAAEC,CAAC,IAAK,GAAG,GAAG,CAAC,IAAI,GAAGA,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC,CAACjB,QAAQ,CAAC,EAAE,CAAC,EAAEkB,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CACjEC,IAAI,CAAC,EAAE,CACZ,CAAC;IAED,OAAOC,IAAI,CAAC1B,KAAK,CAACkB,WAAW,CAAC;EAChC,CAAC,CAAC,OAAOS,KAAK,EAAE;IACd,OAAO,IAAI;EACb;AACF;AAGA,CAAC;AAED,OAAO,SAASC,UAAUA,CAACC,cAAsB,EAAU;EACzD,MAAMC,OAAmC,GAAG;IAC1CC,IAAI,EAAE,SAAS;IACfC,KAAK,EAAE,SAAS;IAChBC,GAAG,EAAE,SAAS;IACdC,IAAI,EAAE,SAAS;IACfC,MAAM,EAAE,SAAS;IACjBC,MAAM,EAAE;EACZ,CAAC;EAED,MAAMC,QAAQ,GAAG,IAAIC,IAAI,CAACT,cAAc,CAAC;EACzC,OAAOQ,QAAQ,CAACE,cAAc,CAACC,SAAS,EAAEV,OAAO,CAAC;AAClD;AACA,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGxD,QAAQ,CAAC,CAAC,CAAC;AAC3C,MAAM,CAACyD,cAAc,EAAEC,iBAAiB,CAAC,GAAG1D,QAAQ,CAAC,KAAK,CAAC;AAC3D,OAAO,MAAM2D,gBAAgB,GAAGA,CAAA,KAAM;EACpCD,iBAAiB,CAAC,IAAI,CAAC;EAEvBF,WAAW,CAACI,OAAO,IAAIA,OAAO,GAAG,CAAE,CAAC;EACpC,OAAOD,gBAAgB;AACzB,CAAC;AAED,OAAO,MAAME,iBAAiB,GAAGA,CAAA,KAAM;EACrCH,iBAAiB,CAAC,KAAK,CAAC;EAExB,OAAOG,iBAAiB;AAC1B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}