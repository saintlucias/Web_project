{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\saint\\\\webpro\\\\webpro\\\\src\\\\pages\\\\ShowImages.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ShowImages = () => {\n  _s();\n  const [images, setImages] = useState([]);\n  useEffect(() => {\n    const fetchImages = async () => {\n      try {\n        const response = await fetch(`${process.env.REACT_APP_API_SERVER_APP}/ShowAllImagaes`); // Replace with your actual API endpoint\n        if (!response.ok) {\n          throw new Error('Failed to fetch images');\n        }\n        const data = await response.json();\n        setImages(data); // Assuming the API returns an array of image URLs\n      } catch (error) {\n        console.error('Error fetching images:', error);\n      }\n    };\n    fetchImages();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uC804\\uCCB4 \\uAC8C\\uC2DC\\uBB3C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ImageContainer, {\n      children: images.map((imageUrl, index) => /*#__PURE__*/_jsxDEV(Image, {\n        src: imageUrl,\n        alt: `Image ${index}`\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(ShowImages, \"ScKwoilS3xNJP1q5r1COmrAdDIM=\");\n_c = ShowImages;\nexport default ShowImages;\nconst ImageContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\n_c2 = ImageContainer;\nconst Image = styled.img`\n  width: 150px;\n  height: 150px;\n\n  margin: 5px;\n`;\n_c3 = Image;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"ShowImages\");\n$RefreshReg$(_c2, \"ImageContainer\");\n$RefreshReg$(_c3, \"Image\");","map":{"version":3,"names":["React","useState","useEffect","styled","jsxDEV","_jsxDEV","Fragment","_Fragment","ShowImages","_s","images","setImages","fetchImages","response","fetch","process","env","REACT_APP_API_SERVER_APP","ok","Error","data","json","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","ImageContainer","map","imageUrl","index","Image","src","alt","_c","div","_c2","img","_c3","$RefreshReg$"],"sources":["C:/Users/saint/webpro/webpro/src/pages/ShowImages.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\n\r\n\r\nconst ShowImages: React.FC = () => {\r\n    const [images, setImages] = useState<string[]>([]);\r\n    \r\n    useEffect(() => {\r\n        const fetchImages = async () => {\r\n            try {\r\n                const response = await fetch(`${process.env.REACT_APP_API_SERVER_APP}/ShowAllImagaes`); // Replace with your actual API endpoint\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch images');\r\n                }\r\n                \r\n                const data = await response.json();\r\n                setImages(data); // Assuming the API returns an array of image URLs\r\n            } catch (error) {\r\n                console.error('Error fetching images:', error);\r\n            }\r\n        };\r\n        \r\n        fetchImages();\r\n    }, []);\r\n    \r\n    return (\r\n        <>\r\n      <h2>전체 게시물</h2>\r\n      <ImageContainer>\r\n        {images.map((imageUrl, index) => (\r\n            <Image key={index} src={imageUrl} alt={`Image ${index}`} />\r\n            ))}\r\n      </ImageContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ShowImages;\r\n\r\nconst ImageContainer = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nconst Image = styled.img`\r\n  width: 150px;\r\n  height: 150px;\r\n\r\n  margin: 5px;\r\n`;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAGvC,MAAMC,UAAoB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAW,EAAE,CAAC;EAElDC,SAAS,CAAC,MAAM;IACZ,MAAMU,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,wBAAyB,iBAAgB,CAAC,CAAC,CAAC;QACxF,IAAI,CAACJ,QAAQ,CAACK,EAAE,EAAE;UACd,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;QAC7C;QAEA,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;QAClCV,SAAS,CAACS,IAAI,CAAC,CAAC,CAAC;MACrB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAClD;IACJ,CAAC;IAEDV,WAAW,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIP,OAAA,CAAAE,SAAA;IAAAiB,QAAA,gBACFnB,OAAA;MAAAmB,QAAA,EAAI;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACfvB,OAAA,CAACwB,cAAc;MAAAL,QAAA,EACZd,MAAM,CAACoB,GAAG,CAAC,CAACC,QAAQ,EAAEC,KAAK,kBACxB3B,OAAA,CAAC4B,KAAK;QAAaC,GAAG,EAAEH,QAAS;QAACI,GAAG,EAAG,SAAQH,KAAM;MAAE,GAA5CA,KAAK;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAyC,CACzD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACQ,CAAC;EAAA,eACjB,CAAC;AAEP,CAAC;AAACnB,EAAA,CA/BID,UAAoB;AAAA4B,EAAA,GAApB5B,UAAoB;AAiC1B,eAAeA,UAAU;AAEzB,MAAMqB,cAAc,GAAG1B,MAAM,CAACkC,GAAI;AAClC;AACA;AACA,CAAC;AAACC,GAAA,GAHIT,cAAc;AAKpB,MAAMI,KAAK,GAAG9B,MAAM,CAACoC,GAAI;AACzB;AACA;AACA;AACA;AACA,CAAC;AAACC,GAAA,GALIP,KAAK;AAAA,IAAAG,EAAA,EAAAE,GAAA,EAAAE,GAAA;AAAAC,YAAA,CAAAL,EAAA;AAAAK,YAAA,CAAAH,GAAA;AAAAG,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}