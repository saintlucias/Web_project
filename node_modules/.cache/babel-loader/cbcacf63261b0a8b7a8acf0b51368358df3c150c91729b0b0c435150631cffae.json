{"ast":null,"code":"{/* 토큰키 암호화 모듈 */}\nimport cryptoJs from \"crypto-js\";\nexport const secretKey = `${process.env.REACT_APP_DB_SECRETKEY}`;\nexport const iv = `${process.env.REACT_APP_DB_IV}`;\n\n// 암호화\nexport const encrypt = text => {\n  const cipher = cryptoJs.AES.encrypt(text, cryptoJs.enc.Utf8.parse(secretKey), {\n    iv: cryptoJs.enc.Utf8.parse(iv),\n    padding: cryptoJs.pad.Pkcs7,\n    mode: cryptoJs.mode.CBC\n  });\n  return cipher.toString();\n};\n\n// 복호화\nexport const decrypt = encryptedText => {\n  const decipher = cryptoJs.AES.decrypt(encryptedText, cryptoJs.enc.Utf8.parse(secretKey), {\n    iv: cryptoJs.enc.Utf8.parse(iv),\n    padding: cryptoJs.pad.Pkcs7,\n    mode: cryptoJs.mode.CBC\n  });\n  return decipher.toString(cryptoJs.enc.Utf8);\n};\n{/* 토큰키 파싱 모듈 */}\nexport default function parseJwt(token) {\n  if (!token) {\n    // console.error('Token is undefined or null');\n    return null;\n  }\n  const parts = token.split('.');\n  if (parts.length !== 3) {\n    // console.error('Token does not have the expected structure');\n    return null;\n  }\n  const base64Url = parts[1];\n  if (!base64Url) {\n    // console.error('Base64Url is undefined or null');\n    return null;\n  }\n  const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n  try {\n    const jsonPayload = decodeURIComponent(atob(base64).split('').map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)).join(''));\n    return JSON.parse(jsonPayload);\n  } catch (error) {\n    // console.error('Error parsing JWT:', error);\n    return null;\n  }\n}","map":{"version":3,"names":["cryptoJs","secretKey","process","env","REACT_APP_DB_SECRETKEY","iv","REACT_APP_DB_IV","encrypt","text","cipher","AES","enc","Utf8","parse","padding","pad","Pkcs7","mode","CBC","toString","decrypt","encryptedText","decipher","parseJwt","token","parts","split","length","base64Url","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","slice","join","JSON","error"],"sources":["C:/Users/saint/webpro/webpro/src/modules/Kst.ts"],"sourcesContent":["{/* 토큰키 암호화 모듈 */}\r\n\r\nimport cryptoJs from \"crypto-js\";\r\n\r\nexport const secretKey = `${process.env.REACT_APP_DB_SECRETKEY}`;\r\nexport const iv = `${process.env.REACT_APP_DB_IV}`;\r\n\r\n// 암호화\r\nexport const encrypt = (text: string) => {\r\n  const cipher = cryptoJs.AES.encrypt(text, cryptoJs.enc.Utf8.parse(secretKey), {\r\n      iv: cryptoJs.enc.Utf8.parse(iv),\r\n      padding: cryptoJs.pad.Pkcs7,\r\n      mode: cryptoJs.mode.CBC,\r\n  });\r\n\r\n  return cipher.toString();\r\n}\r\n\r\n// 복호화\r\nexport const decrypt = (encryptedText: string) => {\r\n  const decipher = cryptoJs.AES.decrypt(encryptedText, cryptoJs.enc.Utf8.parse(secretKey), {\r\n      iv: cryptoJs.enc.Utf8.parse(iv),\r\n      padding: cryptoJs.pad.Pkcs7,\r\n      mode: cryptoJs.mode.CBC,\r\n  });\r\n  return decipher.toString(cryptoJs.enc.Utf8);\r\n}\r\n\r\n\r\n{/* 토큰키 파싱 모듈 */}\r\n\r\nexport default function parseJwt(token: string): any {\r\n    if (!token) {\r\n      // console.error('Token is undefined or null');\r\n      return null;\r\n    }\r\n  \r\n    const parts = token.split('.');\r\n  \r\n    if (parts.length !== 3) {\r\n      // console.error('Token does not have the expected structure');\r\n      return null;\r\n    }\r\n  \r\n    const base64Url = parts[1];\r\n  \r\n    if (!base64Url) {\r\n      // console.error('Base64Url is undefined or null');\r\n      return null;\r\n    }\r\n  \r\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n  \r\n    try {\r\n      const jsonPayload = decodeURIComponent(\r\n        atob(base64)\r\n          .split('')\r\n          .map((c) => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\r\n          .join('')\r\n      );\r\n  \r\n      return JSON.parse(jsonPayload);\r\n    } catch (error) {\r\n      // console.error('Error parsing JWT:', error);\r\n      return null;\r\n    }\r\n  }\r\n  "],"mappings":"AAAA,CAAC;AAED,OAAOA,QAAQ,MAAM,WAAW;AAEhC,OAAO,MAAMC,SAAS,GAAI,GAAEC,OAAO,CAACC,GAAG,CAACC,sBAAuB,EAAC;AAChE,OAAO,MAAMC,EAAE,GAAI,GAAEH,OAAO,CAACC,GAAG,CAACG,eAAgB,EAAC;;AAElD;AACA,OAAO,MAAMC,OAAO,GAAIC,IAAY,IAAK;EACvC,MAAMC,MAAM,GAAGT,QAAQ,CAACU,GAAG,CAACH,OAAO,CAACC,IAAI,EAAER,QAAQ,CAACW,GAAG,CAACC,IAAI,CAACC,KAAK,CAACZ,SAAS,CAAC,EAAE;IAC1EI,EAAE,EAAEL,QAAQ,CAACW,GAAG,CAACC,IAAI,CAACC,KAAK,CAACR,EAAE,CAAC;IAC/BS,OAAO,EAAEd,QAAQ,CAACe,GAAG,CAACC,KAAK;IAC3BC,IAAI,EAAEjB,QAAQ,CAACiB,IAAI,CAACC;EACxB,CAAC,CAAC;EAEF,OAAOT,MAAM,CAACU,QAAQ,CAAC,CAAC;AAC1B,CAAC;;AAED;AACA,OAAO,MAAMC,OAAO,GAAIC,aAAqB,IAAK;EAChD,MAAMC,QAAQ,GAAGtB,QAAQ,CAACU,GAAG,CAACU,OAAO,CAACC,aAAa,EAAErB,QAAQ,CAACW,GAAG,CAACC,IAAI,CAACC,KAAK,CAACZ,SAAS,CAAC,EAAE;IACrFI,EAAE,EAAEL,QAAQ,CAACW,GAAG,CAACC,IAAI,CAACC,KAAK,CAACR,EAAE,CAAC;IAC/BS,OAAO,EAAEd,QAAQ,CAACe,GAAG,CAACC,KAAK;IAC3BC,IAAI,EAAEjB,QAAQ,CAACiB,IAAI,CAACC;EACxB,CAAC,CAAC;EACF,OAAOI,QAAQ,CAACH,QAAQ,CAACnB,QAAQ,CAACW,GAAG,CAACC,IAAI,CAAC;AAC7C,CAAC;AAGD,CAAC;AAED,eAAe,SAASW,QAAQA,CAACC,KAAa,EAAO;EACjD,IAAI,CAACA,KAAK,EAAE;IACV;IACA,OAAO,IAAI;EACb;EAEA,MAAMC,KAAK,GAAGD,KAAK,CAACE,KAAK,CAAC,GAAG,CAAC;EAE9B,IAAID,KAAK,CAACE,MAAM,KAAK,CAAC,EAAE;IACtB;IACA,OAAO,IAAI;EACb;EAEA,MAAMC,SAAS,GAAGH,KAAK,CAAC,CAAC,CAAC;EAE1B,IAAI,CAACG,SAAS,EAAE;IACd;IACA,OAAO,IAAI;EACb;EAEA,MAAMC,MAAM,GAAGD,SAAS,CAACE,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;EAE9D,IAAI;IACF,MAAMC,WAAW,GAAGC,kBAAkB,CACpCC,IAAI,CAACJ,MAAM,CAAC,CACTH,KAAK,CAAC,EAAE,CAAC,CACTQ,GAAG,CAAEC,CAAC,IAAK,GAAG,GAAG,CAAC,IAAI,GAAGA,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC,CAACjB,QAAQ,CAAC,EAAE,CAAC,EAAEkB,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CACjEC,IAAI,CAAC,EAAE,CACZ,CAAC;IAED,OAAOC,IAAI,CAAC1B,KAAK,CAACkB,WAAW,CAAC;EAChC,CAAC,CAAC,OAAOS,KAAK,EAAE;IACd;IACA,OAAO,IAAI;EACb;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}